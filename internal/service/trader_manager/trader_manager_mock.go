// Code generated by MockGen. DO NOT EDIT.
// Source: trader_manager.go

// Package tradermanager is a generated GoMock package.
package tradermanager

import (
	reflect "reflect"
	trader "trading_bot/internal/service/trader"

	gomock "github.com/golang/mock/gomock"
)

// MockIStrategyResolver is a mock of IStrategyResolver interface.
type MockIStrategyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockIStrategyResolverMockRecorder
}

// MockIStrategyResolverMockRecorder is the mock recorder for MockIStrategyResolver.
type MockIStrategyResolverMockRecorder struct {
	mock *MockIStrategyResolver
}

// NewMockIStrategyResolver creates a new mock instance.
func NewMockIStrategyResolver(ctrl *gomock.Controller) *MockIStrategyResolver {
	mock := &MockIStrategyResolver{ctrl: ctrl}
	mock.recorder = &MockIStrategyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStrategyResolver) EXPECT() *MockIStrategyResolverMockRecorder {
	return m.recorder
}

// ResolveStrategy mocks base method.
func (m *MockIStrategyResolver) ResolveStrategy(cfg map[string]any, db, broker any, traderId string) (trader.IStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveStrategy", cfg, db, broker, traderId)
	ret0, _ := ret[0].(trader.IStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveStrategy indicates an expected call of ResolveStrategy.
func (mr *MockIStrategyResolverMockRecorder) ResolveStrategy(cfg, db, broker, traderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveStrategy", reflect.TypeOf((*MockIStrategyResolver)(nil).ResolveStrategy), cfg, db, broker, traderId)
}
