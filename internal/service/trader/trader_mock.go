// Code generated by MockGen. DO NOT EDIT.
// Source: trader.go

// Package trader is a generated GoMock package.
package trader

import (
	context "context"
	reflect "reflect"
	datastruct "trading_bot/internal/service/datastruct"

	gomock "github.com/golang/mock/gomock"
)

// MockIStrategy is a mock of IStrategy interface.
type MockIStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockIStrategyMockRecorder
}

// MockIStrategyMockRecorder is the mock recorder for MockIStrategy.
type MockIStrategyMockRecorder struct {
	mock *MockIStrategy
}

// NewMockIStrategy creates a new mock instance.
func NewMockIStrategy(ctrl *gomock.Controller) *MockIStrategy {
	mock := &MockIStrategy{ctrl: ctrl}
	mock.recorder = &MockIStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStrategy) EXPECT() *MockIStrategyMockRecorder {
	return m.recorder
}

// GetActionDecision mocks base method.
func (m *MockIStrategy) GetActionDecision(ctx context.Context, trId string, instrInfo *datastruct.InstrumentInfo, lp *datastruct.LastPrice) ([]*datastruct.StrategyAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionDecision", ctx, trId, instrInfo, lp)
	ret0, _ := ret[0].([]*datastruct.StrategyAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionDecision indicates an expected call of GetActionDecision.
func (mr *MockIStrategyMockRecorder) GetActionDecision(ctx, trId, instrInfo, lp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionDecision", reflect.TypeOf((*MockIStrategy)(nil).GetActionDecision), ctx, trId, instrInfo, lp)
}

// GetName mocks base method.
func (m *MockIStrategy) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIStrategyMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIStrategy)(nil).GetName))
}

// UpdateConfig mocks base method.
func (m *MockIStrategy) UpdateConfig(params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockIStrategyMockRecorder) UpdateConfig(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockIStrategy)(nil).UpdateConfig), params)
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockILogger) Errorf(template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockILoggerMockRecorder) Errorf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockILogger)(nil).Errorf), varargs...)
}

// Fatalf mocks base method.
func (m *MockILogger) Fatalf(template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockILoggerMockRecorder) Fatalf(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockILogger)(nil).Fatalf), varargs...)
}

// Infof mocks base method.
func (m *MockILogger) Infof(template string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockILoggerMockRecorder) Infof(template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockILogger)(nil).Infof), varargs...)
}

// MockIBroker is a mock of IBroker interface.
type MockIBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIBrokerMockRecorder
}

// MockIBrokerMockRecorder is the mock recorder for MockIBroker.
type MockIBrokerMockRecorder struct {
	mock *MockIBroker
}

// NewMockIBroker creates a new mock instance.
func NewMockIBroker(ctrl *gomock.Controller) *MockIBroker {
	mock := &MockIBroker{ctrl: ctrl}
	mock.recorder = &MockIBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBroker) EXPECT() *MockIBrokerMockRecorder {
	return m.recorder
}

// FindInstrument mocks base method.
func (m *MockIBroker) FindInstrument(identifier string) (*datastruct.InstrumentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInstrument", identifier)
	ret0, _ := ret[0].(*datastruct.InstrumentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInstrument indicates an expected call of FindInstrument.
func (mr *MockIBrokerMockRecorder) FindInstrument(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInstrument", reflect.TypeOf((*MockIBroker)(nil).FindInstrument), identifier)
}

// GetTradingAvailability mocks base method.
func (m *MockIBroker) GetTradingAvailability(instrInfo *datastruct.InstrumentInfo) (datastruct.TradingAvailability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAvailability", instrInfo)
	ret0, _ := ret[0].(datastruct.TradingAvailability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAvailability indicates an expected call of GetTradingAvailability.
func (mr *MockIBrokerMockRecorder) GetTradingAvailability(instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAvailability", reflect.TypeOf((*MockIBroker)(nil).GetTradingAvailability), instrInfo)
}

// MakeBuyOrder mocks base method.
func (m *MockIBroker) MakeBuyOrder(instrInfo *datastruct.InstrumentInfo, lots int64, requestId, accountId string) (*datastruct.PostOrderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBuyOrder", instrInfo, lots, requestId, accountId)
	ret0, _ := ret[0].(*datastruct.PostOrderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBuyOrder indicates an expected call of MakeBuyOrder.
func (mr *MockIBrokerMockRecorder) MakeBuyOrder(instrInfo, lots, requestId, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBuyOrder", reflect.TypeOf((*MockIBroker)(nil).MakeBuyOrder), instrInfo, lots, requestId, accountId)
}

// MakeSellOrder mocks base method.
func (m *MockIBroker) MakeSellOrder(instrInfo *datastruct.InstrumentInfo, lots int64, requestId, accountId string) (*datastruct.PostOrderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSellOrder", instrInfo, lots, requestId, accountId)
	ret0, _ := ret[0].(*datastruct.PostOrderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSellOrder indicates an expected call of MakeSellOrder.
func (mr *MockIBrokerMockRecorder) MakeSellOrder(instrInfo, lots, requestId, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSellOrder", reflect.TypeOf((*MockIBroker)(nil).MakeSellOrder), instrInfo, lots, requestId, accountId)
}

// RecieveLastPrice mocks base method.
func (m *MockIBroker) RecieveLastPrice(ctx context.Context, instrInfo *datastruct.InstrumentInfo) (*datastruct.LastPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecieveLastPrice", ctx, instrInfo)
	ret0, _ := ret[0].(*datastruct.LastPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecieveLastPrice indicates an expected call of RecieveLastPrice.
func (mr *MockIBrokerMockRecorder) RecieveLastPrice(ctx, instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecieveLastPrice", reflect.TypeOf((*MockIBroker)(nil).RecieveLastPrice), ctx, instrInfo)
}

// RecieveOrdersUpdate mocks base method.
func (m *MockIBroker) RecieveOrdersUpdate(ctx context.Context, instrInfo *datastruct.InstrumentInfo, accountId string) (*datastruct.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecieveOrdersUpdate", ctx, instrInfo, accountId)
	ret0, _ := ret[0].(*datastruct.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecieveOrdersUpdate indicates an expected call of RecieveOrdersUpdate.
func (mr *MockIBrokerMockRecorder) RecieveOrdersUpdate(ctx, instrInfo, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecieveOrdersUpdate", reflect.TypeOf((*MockIBroker)(nil).RecieveOrdersUpdate), ctx, instrInfo, accountId)
}

// RegisterLastPriceRecipient mocks base method.
func (m *MockIBroker) RegisterLastPriceRecipient(instrInfo *datastruct.InstrumentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLastPriceRecipient", instrInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLastPriceRecipient indicates an expected call of RegisterLastPriceRecipient.
func (mr *MockIBrokerMockRecorder) RegisterLastPriceRecipient(instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLastPriceRecipient", reflect.TypeOf((*MockIBroker)(nil).RegisterLastPriceRecipient), instrInfo)
}

// RegisterOrderStateRecipient mocks base method.
func (m *MockIBroker) RegisterOrderStateRecipient(instrInfo *datastruct.InstrumentInfo, accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrderStateRecipient", instrInfo, accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrderStateRecipient indicates an expected call of RegisterOrderStateRecipient.
func (mr *MockIBrokerMockRecorder) RegisterOrderStateRecipient(instrInfo, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrderStateRecipient", reflect.TypeOf((*MockIBroker)(nil).RegisterOrderStateRecipient), instrInfo, accountId)
}

// UnregisterLastPriceRecipient mocks base method.
func (m *MockIBroker) UnregisterLastPriceRecipient(instrInfo *datastruct.InstrumentInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLastPriceRecipient", instrInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterLastPriceRecipient indicates an expected call of UnregisterLastPriceRecipient.
func (mr *MockIBrokerMockRecorder) UnregisterLastPriceRecipient(instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLastPriceRecipient", reflect.TypeOf((*MockIBroker)(nil).UnregisterLastPriceRecipient), instrInfo)
}

// UnregisterOrderStateRecipient mocks base method.
func (m *MockIBroker) UnregisterOrderStateRecipient(instrInfo *datastruct.InstrumentInfo, accountId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterOrderStateRecipient", instrInfo, accountId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterOrderStateRecipient indicates an expected call of UnregisterOrderStateRecipient.
func (mr *MockIBrokerMockRecorder) UnregisterOrderStateRecipient(instrInfo, accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterOrderStateRecipient", reflect.TypeOf((*MockIBroker)(nil).UnregisterOrderStateRecipient), instrInfo, accountId)
}

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// AddInstrumentInfo mocks base method.
func (m *MockIStorage) AddInstrumentInfo(instrInfo *datastruct.InstrumentInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstrumentInfo", instrInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstrumentInfo indicates an expected call of AddInstrumentInfo.
func (mr *MockIStorageMockRecorder) AddInstrumentInfo(instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstrumentInfo", reflect.TypeOf((*MockIStorage)(nil).AddInstrumentInfo), instrInfo)
}

// PutOrder mocks base method.
func (m *MockIStorage) PutOrder(trId string, instrInfo *datastruct.InstrumentInfo, order *datastruct.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOrder", trId, instrInfo, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOrder indicates an expected call of PutOrder.
func (mr *MockIStorageMockRecorder) PutOrder(trId, instrInfo, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOrder", reflect.TypeOf((*MockIStorage)(nil).PutOrder), trId, instrInfo, order)
}
