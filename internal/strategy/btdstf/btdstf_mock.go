// Code generated by MockGen. DO NOT EDIT.
// Source: btdstf.go

// Package btdstf is a generated GoMock package.
package btdstf

import (
	reflect "reflect"
	datastruct "trading_bot/internal/service/datastruct"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorageStrategy is a mock of IStorageStrategy interface.
type MockIStorageStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageStrategyMockRecorder
}

// MockIStorageStrategyMockRecorder is the mock recorder for MockIStorageStrategy.
type MockIStorageStrategyMockRecorder struct {
	mock *MockIStorageStrategy
}

// NewMockIStorageStrategy creates a new mock instance.
func NewMockIStorageStrategy(ctrl *gomock.Controller) *MockIStorageStrategy {
	mock := &MockIStorageStrategy{ctrl: ctrl}
	mock.recorder = &MockIStorageStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageStrategy) EXPECT() *MockIStorageStrategyMockRecorder {
	return m.recorder
}

// GetHighestExecutedBuyOrder mocks base method.
func (m *MockIStorageStrategy) GetHighestExecutedBuyOrder(trId string, instrInfo *datastruct.InstrumentInfo) (*datastruct.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestExecutedBuyOrder", trId, instrInfo)
	ret0, _ := ret[0].(*datastruct.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHighestExecutedBuyOrder indicates an expected call of GetHighestExecutedBuyOrder.
func (mr *MockIStorageStrategyMockRecorder) GetHighestExecutedBuyOrder(trId, instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestExecutedBuyOrder", reflect.TypeOf((*MockIStorageStrategy)(nil).GetHighestExecutedBuyOrder), trId, instrInfo)
}

// GetLatestExecutedSellOrder mocks base method.
func (m *MockIStorageStrategy) GetLatestExecutedSellOrder(trId string, instrInfo *datastruct.InstrumentInfo) (*datastruct.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestExecutedSellOrder", trId, instrInfo)
	ret0, _ := ret[0].(*datastruct.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestExecutedSellOrder indicates an expected call of GetLatestExecutedSellOrder.
func (mr *MockIStorageStrategyMockRecorder) GetLatestExecutedSellOrder(trId, instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestExecutedSellOrder", reflect.TypeOf((*MockIStorageStrategy)(nil).GetLatestExecutedSellOrder), trId, instrInfo)
}

// GetLowestExecutedBuyOrder mocks base method.
func (m *MockIStorageStrategy) GetLowestExecutedBuyOrder(trId string, instrInfo *datastruct.InstrumentInfo) (*datastruct.Order, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowestExecutedBuyOrder", trId, instrInfo)
	ret0, _ := ret[0].(*datastruct.Order)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLowestExecutedBuyOrder indicates an expected call of GetLowestExecutedBuyOrder.
func (mr *MockIStorageStrategyMockRecorder) GetLowestExecutedBuyOrder(trId, instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowestExecutedBuyOrder", reflect.TypeOf((*MockIStorageStrategy)(nil).GetLowestExecutedBuyOrder), trId, instrInfo)
}

// GetUnsoldOrdersAmount mocks base method.
func (m *MockIStorageStrategy) GetUnsoldOrdersAmount(trId string, instrInfo *datastruct.InstrumentInfo) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsoldOrdersAmount", trId, instrInfo)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsoldOrdersAmount indicates an expected call of GetUnsoldOrdersAmount.
func (mr *MockIStorageStrategyMockRecorder) GetUnsoldOrdersAmount(trId, instrInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsoldOrdersAmount", reflect.TypeOf((*MockIStorageStrategy)(nil).GetUnsoldOrdersAmount), trId, instrInfo)
}

// MakeNewOrder mocks base method.
func (m *MockIStorageStrategy) MakeNewOrder(arg0 *datastruct.InstrumentInfo, arg1 *datastruct.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeNewOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeNewOrder indicates an expected call of MakeNewOrder.
func (mr *MockIStorageStrategyMockRecorder) MakeNewOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeNewOrder", reflect.TypeOf((*MockIStorageStrategy)(nil).MakeNewOrder), arg0, arg1)
}

// RemoveOrder mocks base method.
func (m *MockIStorageStrategy) RemoveOrder(instrInfo *datastruct.InstrumentInfo, order *datastruct.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrder", instrInfo, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrder indicates an expected call of RemoveOrder.
func (mr *MockIStorageStrategyMockRecorder) RemoveOrder(instrInfo, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrder", reflect.TypeOf((*MockIStorageStrategy)(nil).RemoveOrder), instrInfo, order)
}
